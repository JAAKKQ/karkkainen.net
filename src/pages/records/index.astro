---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';

const metadata = {
  title: 'My Vinyl Records',
  robots: { follow: false },
};
---

<Layout metadata={metadata}>
  <section class="p-16">
    <Headline
      title="My Vinyl Records"
      subtitle="I use this tool to find specific records from my shelf.<br>Start typing on the input box below and the search simulation will stop."
    />
    <div class="container flex flex-col items-center justify-center px-5 mx-auto my-8">
      <div class="w-1/2 max-md:w-full">
        <input
          id="search-input"
          class="rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 l p-4 sm:p-1 lg:p-2 w-full"
          type="text"
          placeholder="Type record name..."
        />
        <div class="mt-2">
          <button
            id="all-button"
            class="rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 px-2 py-1 text-xs hover:bg-gray-100 dark:hover:bg-slate-800 transition-colors"
            >All Records</button
          >
          <button
            id="random-button"
            class="rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 px-2 py-1 text-xs hover:bg-gray-100 dark:hover:bg-slate-800 transition-colors"
            >Random Record</button
          >
        </div>
        <p id="result-counter">0 records</p>
      </div>

      <div id="results-container" class="w-full grid grid-cols-1 sm:grid-cols-3 md:grid-cols-6 p-6 text-xs">
        <div
          class="rounded-lg bg-blue-50 transition-colors md:p-6 p-3 m-2 flex flex-col items-center text-center dark:bg-slate-900 dark:hover:bg-slate-800"
        >
          <a href="/">
            <img src="" alt="" />
            <p class="font-bold">Loading Result Title</p>
            <p>Loading Result Data</p>
            <a href=""></a>
          </a>
        </div>
      </div>
    </div>
  </section>
  <script>
    const request = await fetch('../../records.json');
    const response = await request.json();

    response.sort((a, b) => {
      const yearA = parseInt(a.result.year || 3000)
      const yearB = parseInt(b.result.year || 3000);

      if (yearA < yearB) {
        return -1;
      }
      if (yearA > yearB) {
        return 1;
      }
      return 0;
    });

    for(const record of response) {
      console.log(record.result)
    }

    function searchObject(obj: any, query: any) {
      let matches = false;
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          const value = obj[key];
          if (typeof value === 'string') {
            matches = value.toLowerCase().includes(query);
          } else if (typeof value === 'number') {
            matches = value.toString().includes(query);
          } else if (Array.isArray(value)) {
            matches = value.some((element) => {
              if (typeof element === 'string') {
                return element.toLowerCase().includes(query);
              } else if (typeof element === 'object') {
                return searchObject(element, query);
              }
              return false;
            });
          } else if (typeof value === 'object') {
            matches = searchObject(value, query);
          }
          if (matches) break;
        }
      }
      return matches;
    }

    function search(query) {
      if (typeof query !== 'string') {
        console.error('Search query must be a string');
        return;
      }
      query = query.toLowerCase();
      const results = response.filter((record) => {
        return searchObject(record, query);
      });

      const resultsContainer = document.getElementById('results-container');
      const resultsCounter = document.getElementById('result-counter');

      if (!resultsContainer) throw new Error('The results container was not found.');
      if (!resultsCounter) throw new Error('The results container was not found.');
      resultsContainer.innerHTML = '';
      resultsCounter.innerHTML = `${results.length} records`;

      results.forEach((result: any) => {
        addResult(result, resultsContainer);
      });
    }
    function addResult(result: any, resultsContainer: any) {
      const resultHTML = `
        <div
          class="rounded-lg bg-blue-50 transition-colors md:p-6 p-3 m-2 flex flex-col items-center text-center dark:bg-slate-900 dark:hover:bg-slate-800 hover:bg-blue-100"
        >
          <a href="${'https://www.discogs.com' + result.result.uri || ''}" >
            <img class="mb-4" src="${result.result.cover_image}" alt="" />
            <p class="font-bold">${result.result.title || ''}</p>
            <p>${result.result.genre || ''}</p>
            <p>${result.result.year || ''}</p>
            <a  href="${'https://www.discogs.com' + result.result.uri || ''}" class="pt-1 underline">View on Discogs</a>
          </a>
        </div>
        `;

      // Insert the new HTML into the container
      resultsContainer.insertAdjacentHTML('beforeend', resultHTML);
    }

    const searchInput = document.getElementById('search-input') as HTMLInputElement | null;

    if (searchInput) {
      searchInput.addEventListener('input', (event: Event) => {
        const target = event.target as HTMLInputElement;

        if (target.value === '~') {
          location.reload();
        } else {
          search(target.value);
        }
      });
    } else {
      console.error('The search input element was not found.');
    }

    const randomButton = document.getElementById('random-button');

    randomButton.addEventListener('click', () => {
      if (searchInput) {
        searchInput.value = '';
        searchInput.dispatchEvent(new Event('input'));
      }
      const resultsContainer = document.getElementById('results-container');
      const resultsCounter = document.getElementById('result-counter');

      const randomRecord = response[Math.floor(Math.random() * response.length)];
      resultsContainer.innerHTML = '';
      resultsCounter.innerHTML = `1 record`;

      searchInput.focus();
      searchInput.value = randomRecord.result.title;

      addResult(randomRecord, resultsContainer);
    });

    const allButton = document.getElementById('all-button');

    allButton.addEventListener('click', () => {
      searchInput.focus();
      searchInput.value = '';
      search('');
    });

    /**
     * Simulates typing queries into the search input in a loop until the user focuses on the input.
     * Removes the previous query one character at a time before typing the next query.
     * @param {string[]} queries - An array of search terms to simulate typing.
     * @param {number} charInterval - Time in milliseconds between typing or deleting each character.
     * @param {number} queryInterval - Time in milliseconds between typing each query.
     */
    function simulateSearch(queries, charInterval = 100, queryInterval = 1000) {
      const searchInput = document.getElementById('search-input') as HTMLInputElement | null;

      if (!searchInput) {
        console.error('The search input element was not found.');
        return;
      }

      let queryIndex = 0;
      let isRunning = true; // Control flag to stop the simulation

      const deleteQuery = () => {
        if (!isRunning) return; // Exit if simulation is stopped

        if (searchInput.value.length > 0) {
          searchInput.value = searchInput.value.slice(0, -1); // Remove one character at a time
          const inputEvent = new Event('input', { bubbles: true }); // Trigger input event
          searchInput.dispatchEvent(inputEvent);
          setTimeout(deleteQuery, charInterval); // Schedule next character deletion
        } else {
          queryIndex = (queryIndex + 1) % queries.length; // Move to the next query (loop back to start)
          typeQuery(); // Start typing the next query
        }
      };

      const typeQuery = () => {
        if (!isRunning) return; // Exit if simulation is stopped

        const query = queries[queryIndex];
        let charIndex = 0;

        const typeCharacter = () => {
          if (!isRunning) return; // Exit if simulation is stopped

          if (charIndex < query.length) {
            searchInput.value = query.slice(0, charIndex + 1); // Add characters progressively
            const inputEvent = new Event('input', { bubbles: true }); // Trigger input event
            searchInput.dispatchEvent(inputEvent);
            charIndex++;
            setTimeout(typeCharacter, charInterval); // Schedule next character
          } else {
            setTimeout(deleteQuery, queryInterval); // Start deleting after typing the query
          }
        };

        typeCharacter();
      };

      // Start the simulation
      typeQuery();

      // Stop simulation when the user focuses on the search input
      searchInput.addEventListener('focus', () => {
        isRunning = false; // Stop the loop
        console.log('Typing simulation stopped due to user focus.');
      });
    }

    // Example usage
    //simulateSearch(['Bob Marley', 'Tchaikovsky', 'Michael Jackson', 'Elegia', 'Louis Armstrong'], 50, 1200);

    search('');
  </script>
</Layout>
