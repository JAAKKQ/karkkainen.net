---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { twMerge } from "tailwind-merge";
import type { Contact } from '~/types';
import { Icon } from 'astro-icon/components';
import Content from '~/components/widgets/Content.astro';
import ContactForm from './ContactForm.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  email,
  fingerprint,
  key,
  id,
  isDark = false,
  classes = {},
  keyHeight,
  bg = await Astro.slots.render('bg'),
} = Astro.props as Contact;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline tagline={tagline} title={title} subtitle={subtitle} />
  <Content
    id="about"
    columns={4}
    classes={{ container: "md:-mt-28 md:-mb-16 p-0", callToAction: "flex" }}
    items={[
      {
        icon: 'tabler:at',
        callToAction: {
          text: 'E-Mail',
          href: 'mailto:Rene@Karkkainen.net',
        },
      },
      {
        icon: 'tabler:brand-teams',
        callToAction: {
          target: '_blank',
          text: 'Teams',
          href: '../r/teams.html',
        },
      },
      {
        icon: 'tabler:brand-linkedin',
        callToAction: {
          target: '_blank',
          text: 'LinkedIn',
          href: '../r/linkedin.html',
        },
      },
      {
        icon: 'tabler:brand-github',
        callToAction: {
          target: '_blank',
          text: 'GitHub',
          href: '../r/github.html',
        },
      },
    ]}
  />
  {
    (
      <>
        <div class="flex flex-col max-w-3xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8">
          { email && <div class="flex justify-center"><a href={twMerge("mailto:", email)} class="w-fit text-2xl" set:html={email}></a></div>}
          { key && 
            <p class="text-center pt-5 pb-4 text-muted">{fingerprint}</p>          
            <div class="relative">
              <textarea readonly id="pgpTextarea"  class="text-center w-full border rounded-lg  border-gray-200 dark:border-gray-700 text-sm text-muted dark:bg-slate-900 blur" style={{ minHeight: keyHeight, height: 'auto' }}>{key}</textarea>
              <div id="overlay" class="overlay absolute inset-0 flex justify-center items-center cursor-pointer">
                <span class="text-lg text-gray-800 underline underline-offset-4 dark:text-gray-200">Reveal PGP Key</span>
              </div>
            </div>
            <div class="flex">
              <a class="text-xs underline" href="/pgp.txt">Plain text PGP key</a>
              <Icon name={"tabler:key"} class="ml-1 w-3 h-3 text-gray-500"/>
            </div>
          }
        </div>
      </>
    )
  }

<ContactForm/>
<style>
  .blur {
    filter: blur(7px); /* Adjust the blur amount as needed */
    transition: filter 0.3s ease-out;
  }
</style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
    const overlay = document.getElementById('overlay') as HTMLDivElement;
    const pgpTextarea = document.getElementById('pgpTextarea') as HTMLTextAreaElement;

    if (overlay && pgpTextarea) {
      overlay.addEventListener('click', () => {
        overlay.classList.add('hidden'); // Hide the overlay
        pgpTextarea.classList.remove('blur'); // Remove the blur effect
      });
    }
    });
  </script>
</WidgetWrapper>